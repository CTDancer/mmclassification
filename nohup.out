/bin/bash: /home/dqwang/anaconda3/lib/libtinfo.so.6: no version information available (required by /bin/bash)
bash: /home/dqwang/anaconda3/lib/libtinfo.so.6: no version information available (required by bash)
/home/dqwang/anaconda3/envs/distillation_ct/lib/python3.9/site-packages/torch/distributed/launch.py:178: FutureWarning: The module torch.distributed.launch is deprecated
and will be removed in future. Use torchrun.
Note that --use_env is set by default in torchrun.
If your script expects `--local_rank` argument to be set, please
change it to read from `os.environ['LOCAL_RANK']` instead. See 
https://pytorch.org/docs/stable/distributed.html#launch-utility for 
further instructions

  warnings.warn(
WARNING:torch.distributed.run:
*****************************************
Setting OMP_NUM_THREADS environment variable for each process to be 1 in default, to avoid your system being overloaded, please further tune the variable for optimal performance in your application as needed. 
*****************************************
/home/dqwang/anaconda3/envs/distillation_ct/lib/python3.9/site-packages/mmcv/__init__.py:20: UserWarning: On January 1, 2023, MMCV will release v2.0.0, in which it will remove components related to the training process and add a data transformation module. In addition, it will rename the package names mmcv to mmcv-lite and mmcv-full to mmcv. See https://github.com/open-mmlab/mmcv/blob/master/docs/en/compatibility.md for more details.
  warnings.warn(
/home/dqwang/anaconda3/envs/distillation_ct/lib/python3.9/site-packages/mmcv/__init__.py:20: UserWarning: On January 1, 2023, MMCV will release v2.0.0, in which it will remove components related to the training process and add a data transformation module. In addition, it will rename the package names mmcv to mmcv-lite and mmcv-full to mmcv. See https://github.com/open-mmlab/mmcv/blob/master/docs/en/compatibility.md for more details.
  warnings.warn(
/home/dqwang/scratch/tongchen/mmclassification/mmcls/utils/setup_env.py:42: UserWarning: Setting MKL_NUM_THREADS environment variable for each process to be 1 in default, to avoid your system being overloaded, please further tune the variable for optimal performance in your application as needed.
  warnings.warn(
/home/dqwang/scratch/tongchen/mmclassification/mmcls/utils/setup_env.py:42: UserWarning: Setting MKL_NUM_THREADS environment variable for each process to be 1 in default, to avoid your system being overloaded, please further tune the variable for optimal performance in your application as needed.
  warnings.warn(
2023-03-29 01:49:19,200 - mmcls - INFO - Environment info:
------------------------------------------------------------
sys.platform: linux
Python: 3.9.7 (default, Sep 16 2021, 13:09:58) [GCC 7.5.0]
CUDA available: True
GPU 0,1,2,3,4,5,6,7: NVIDIA Tesla K80
CUDA_HOME: /usr/local/cuda
NVCC: Cuda compilation tools, release 11.7, V11.7.64
GCC: gcc (Ubuntu 11.2.0-19ubuntu1) 11.2.0
PyTorch: 1.11.0
PyTorch compiling details: PyTorch built with:
  - GCC 7.3
  - C++ Version: 201402
  - Intel(R) oneAPI Math Kernel Library Version 2021.4-Product Build 20210904 for Intel(R) 64 architecture applications
  - Intel(R) MKL-DNN v2.5.2 (Git Hash a9302535553c73243c632ad3c4c80beec3d19a1e)
  - OpenMP 201511 (a.k.a. OpenMP 4.5)
  - LAPACK is enabled (usually provided by MKL)
  - NNPACK is enabled
  - CPU capability usage: NO AVX
  - CUDA Runtime 11.3
  - NVCC architecture flags: -gencode;arch=compute_37,code=sm_37;-gencode;arch=compute_50,code=sm_50;-gencode;arch=compute_60,code=sm_60;-gencode;arch=compute_61,code=sm_61;-gencode;arch=compute_70,code=sm_70;-gencode;arch=compute_75,code=sm_75;-gencode;arch=compute_80,code=sm_80;-gencode;arch=compute_86,code=sm_86;-gencode;arch=compute_37,code=compute_37
  - CuDNN 8.2
  - Magma 2.5.2
  - Build settings: BLAS_INFO=mkl, BUILD_TYPE=Release, CUDA_VERSION=11.3, CUDNN_VERSION=8.2.0, CXX_COMPILER=/opt/rh/devtoolset-7/root/usr/bin/c++, CXX_FLAGS= -Wno-deprecated -fvisibility-inlines-hidden -DUSE_PTHREADPOOL -fopenmp -DNDEBUG -DUSE_KINETO -DUSE_FBGEMM -DUSE_QNNPACK -DUSE_PYTORCH_QNNPACK -DUSE_XNNPACK -DSYMBOLICATE_MOBILE_DEBUG_HANDLE -DEDGE_PROFILER_USE_KINETO -O2 -fPIC -Wno-narrowing -Wall -Wextra -Werror=return-type -Wno-missing-field-initializers -Wno-type-limits -Wno-array-bounds -Wno-unknown-pragmas -Wno-sign-compare -Wno-unused-parameter -Wno-unused-function -Wno-unused-result -Wno-unused-local-typedefs -Wno-strict-overflow -Wno-strict-aliasing -Wno-error=deprecated-declarations -Wno-stringop-overflow -Wno-psabi -Wno-error=pedantic -Wno-error=redundant-decls -Wno-error=old-style-cast -fdiagnostics-color=always -faligned-new -Wno-unused-but-set-variable -Wno-maybe-uninitialized -fno-math-errno -fno-trapping-math -Werror=format -Wno-stringop-overflow, LAPACK_INFO=mkl, PERF_WITH_AVX=1, PERF_WITH_AVX2=1, PERF_WITH_AVX512=1, TORCH_VERSION=1.11.0, USE_CUDA=ON, USE_CUDNN=ON, USE_EXCEPTION_PTR=1, USE_GFLAGS=OFF, USE_GLOG=OFF, USE_MKL=ON, USE_MKLDNN=OFF, USE_MPI=OFF, USE_NCCL=ON, USE_NNPACK=ON, USE_OPENMP=ON, USE_ROCM=OFF, 

TorchVision: 0.12.0
OpenCV: 4.7.0
MMCV: 1.7.1
MMCV Compiler: GCC 9.3
MMCV CUDA Compiler: 11.3
MMClassification: 0.25.0+562b10a
------------------------------------------------------------

2023-03-29 01:49:19,201 - mmcls - INFO - Distributed training: True
2023-03-29 01:49:20,289 - mmcls - INFO - Config:
model = dict(
    type='ImageClassifier',
    backbone=dict(
        type='ResNet',
        depth=50,
        num_stages=4,
        out_indices=(3, ),
        style='pytorch'),
    neck=dict(type='GlobalAveragePooling'),
    head=dict(type='MultiLabelLinearClsHead', num_classes=14, in_channels=512))
dataset_type = 'MIMIC'
classes = [
    '0', '1', '2', '3', '4', '5', '6', '7', '8', '9', '10', '11', '12', '13'
]
img_norm_cfg = dict(
    mean=[0.485, 0.456, 0.406], std=[0.229, 0.224, 0.225], to_rgb=False)
train_pipeline = [
    dict(type='LoadImageFromFile'),
    dict(type='RandomFlip', flip_prob=0.5, direction='horizontal'),
    dict(type='Rotate', angle=15.0, prob=1),
    dict(type='Resize', size=224),
    dict(
        type='Normalize',
        mean=[0.485, 0.456, 0.406],
        std=[0.229, 0.224, 0.225],
        to_rgb=False),
    dict(type='ImageToTensor', keys=['img']),
    dict(type='ToTensor', keys=['gt_label']),
    dict(type='Collect', keys=['img', 'gt_label'])
]
test_pipeline = [
    dict(type='LoadImageFromFile'),
    dict(type='Resize', size=224),
    dict(
        type='Normalize',
        mean=[0.485, 0.456, 0.406],
        std=[0.229, 0.224, 0.225],
        to_rgb=False),
    dict(type='ImageToTensor', keys=['img']),
    dict(type='ToTensor', keys=['gt_label']),
    dict(type='Collect', keys=['img', 'gt_label'])
]
data = dict(
    samples_per_gpu=512,
    workers_per_gpu=4,
    train=dict(
        type='MIMIC',
        data_prefix='/shared/dqwang/scratch/tongchen/MIMIC/train',
        ann_file=
        '/shared/dqwang/scratch/yunkunzhang/mimic_multi-label_ann/train.txt',
        classes=[
            '0', '1', '2', '3', '4', '5', '6', '7', '8', '9', '10', '11', '12',
            '13'
        ],
        pipeline=[
            dict(type='LoadImageFromFile'),
            dict(type='RandomFlip', flip_prob=0.5, direction='horizontal'),
            dict(type='Rotate', angle=15.0, prob=1),
            dict(type='Resize', size=224),
            dict(
                type='Normalize',
                mean=[0.485, 0.456, 0.406],
                std=[0.229, 0.224, 0.225],
                to_rgb=False),
            dict(type='ImageToTensor', keys=['img']),
            dict(type='ToTensor', keys=['gt_label']),
            dict(type='Collect', keys=['img', 'gt_label'])
        ]),
    val=dict(
        type='MIMIC',
        data_prefix='/shared/dqwang/scratch/tongchen/MIMIC/test',
        ann_file=
        '/shared/dqwang/scratch/yunkunzhang/mimic_multi-label_ann/test.txt',
        pipeline=[
            dict(type='LoadImageFromFile'),
            dict(type='Resize', size=224),
            dict(
                type='Normalize',
                mean=[0.485, 0.456, 0.406],
                std=[0.229, 0.224, 0.225],
                to_rgb=False),
            dict(type='ImageToTensor', keys=['img']),
            dict(type='ToTensor', keys=['gt_label']),
            dict(type='Collect', keys=['img', 'gt_label'])
        ]),
    test=dict(
        type='MIMIC',
        data_prefix='/shared/dqwang/scratch/tongchen/MIMIC/test',
        ann_file=
        '/shared/dqwang/scratch/yunkunzhang/mimic_multi-label_ann/test.txt',
        classes=[
            '0', '1', '2', '3', '4', '5', '6', '7', '8', '9', '10', '11', '12',
            '13'
        ],
        pipeline=[
            dict(type='LoadImageFromFile'),
            dict(type='Resize', size=224),
            dict(
                type='Normalize',
                mean=[0.485, 0.456, 0.406],
                std=[0.229, 0.224, 0.225],
                to_rgb=False),
            dict(type='ImageToTensor', keys=['img']),
            dict(type='ToTensor', keys=['gt_label']),
            dict(type='Collect', keys=['img', 'gt_label'])
        ],
        test_mode=True))
evaluation = dict(interval=1, metric='bag_class_accuracy')
optimizer = dict(type='SGD', lr=1e-05, momentum=0.9, weight_decay=0.0001)
optimizer_config = dict(grad_clip=None)
lr_config = dict(
    policy='CosineAnnealing',
    min_lr=0,
    warmup='linear',
    warmup_iters=5,
    warmup_ratio=0.1,
    warmup_by_epoch=True)
runner = dict(type='EpochBasedRunner', max_epochs=50)
checkpoint_config = dict(interval=1)
log_config = dict(
    interval=100,
    hooks=[
        dict(type='TextLoggerHook'),
        dict(type='TensorboardLoggerHook'),
        dict(
            type='MMClsWandbHook',
            init_kwargs=dict(
                project='Distillaiton_MIMIC_MMCLS',
                entity='tongchen',
                name='train'),
            log_checkpoint=True,
            log_checkpoint_metadata=True)
    ])
dist_params = dict(backend='nccl')
log_level = 'INFO'
load_from = '/shared/dqwang/scratch/lfzhou/r18_imgpre.pth'
resume_from = None
workflow = [('train', 1)]
work_dir = 'work_dirs/train2'
gpu_ids = range(0, 2)

2023-03-29 01:49:22,744 - mmcls - INFO - Set random seed to 1342197005, deterministic: False
2023-03-29 01:49:23,002 - mmcv - INFO - initialize ResNet with init_cfg [{'type': 'Kaiming', 'layer': ['Conv2d']}, {'type': 'Constant', 'val': 1, 'layer': ['_BatchNorm', 'GroupNorm']}]
2023-03-29 01:49:23,039 - mmcv - INFO - initialize ResNet with init_cfg [{'type': 'Kaiming', 'layer': ['Conv2d']}, {'type': 'Constant', 'val': 1, 'layer': ['_BatchNorm', 'GroupNorm']}]
2023-03-29 01:49:23,524 - mmcv - INFO - initialize MultiLabelLinearClsHead with init_cfg {'type': 'Normal', 'layer': 'Linear', 'std': 0.01}
2023-03-29 01:49:23,634 - mmcv - INFO - initialize MultiLabelLinearClsHead with init_cfg {'type': 'Normal', 'layer': 'Linear', 'std': 0.01}
2023-03-29 01:49:23,635 - mmcv - INFO - 
backbone.conv1.weight - torch.Size([64, 3, 7, 7]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 
 
2023-03-29 01:49:23,635 - mmcv - INFO - 
backbone.bn1.weight - torch.Size([64]): 
The value is the same before and after calling `init_weights` of ImageClassifier  
 
2023-03-29 01:49:23,635 - mmcv - INFO - 
backbone.bn1.bias - torch.Size([64]): 
The value is the same before and after calling `init_weights` of ImageClassifier  
 
2023-03-29 01:49:23,635 - mmcv - INFO - 
backbone.layer1.0.conv1.weight - torch.Size([64, 64, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 
 
2023-03-29 01:49:23,636 - mmcv - INFO - 
backbone.layer1.0.bn1.weight - torch.Size([64]): 
The value is the same before and after calling `init_weights` of ImageClassifier  
 
2023-03-29 01:49:23,636 - mmcv - INFO - 
backbone.layer1.0.bn1.bias - torch.Size([64]): 
The value is the same before and after calling `init_weights` of ImageClassifier  
 
2023-03-29 01:49:23,636 - mmcv - INFO - 
backbone.layer1.0.conv2.weight - torch.Size([64, 64, 3, 3]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 
 
2023-03-29 01:49:23,636 - mmcv - INFO - 
backbone.layer1.0.bn2.weight - torch.Size([64]): 
The value is the same before and after calling `init_weights` of ImageClassifier  
 
2023-03-29 01:49:23,636 - mmcv - INFO - 
backbone.layer1.0.bn2.bias - torch.Size([64]): 
The value is the same before and after calling `init_weights` of ImageClassifier  
 
2023-03-29 01:49:23,636 - mmcv - INFO - 
backbone.layer1.0.conv3.weight - torch.Size([256, 64, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 
 
2023-03-29 01:49:23,636 - mmcv - INFO - 
backbone.layer1.0.bn3.weight - torch.Size([256]): 
Initialized by user-defined `init_weights` in ResNet  
 
2023-03-29 01:49:23,636 - mmcv - INFO - 
backbone.layer1.0.bn3.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of ImageClassifier  
 
2023-03-29 01:49:23,637 - mmcv - INFO - 
backbone.layer1.0.downsample.0.weight - torch.Size([256, 64, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 
 
2023-03-29 01:49:23,637 - mmcv - INFO - 
backbone.layer1.0.downsample.1.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of ImageClassifier  
 
2023-03-29 01:49:23,637 - mmcv - INFO - 
backbone.layer1.0.downsample.1.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of ImageClassifier  
 
2023-03-29 01:49:23,637 - mmcv - INFO - 
backbone.layer1.1.conv1.weight - torch.Size([64, 256, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 
 
2023-03-29 01:49:23,637 - mmcv - INFO - 
backbone.layer1.1.bn1.weight - torch.Size([64]): 
The value is the same before and after calling `init_weights` of ImageClassifier  
 
2023-03-29 01:49:23,637 - mmcv - INFO - 
backbone.layer1.1.bn1.bias - torch.Size([64]): 
The value is the same before and after calling `init_weights` of ImageClassifier  
 
2023-03-29 01:49:23,637 - mmcv - INFO - 
backbone.layer1.1.conv2.weight - torch.Size([64, 64, 3, 3]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 
 
2023-03-29 01:49:23,637 - mmcv - INFO - 
backbone.layer1.1.bn2.weight - torch.Size([64]): 
The value is the same before and after calling `init_weights` of ImageClassifier  
 
2023-03-29 01:49:23,637 - mmcv - INFO - 
backbone.layer1.1.bn2.bias - torch.Size([64]): 
The value is the same before and after calling `init_weights` of ImageClassifier  
 
2023-03-29 01:49:23,638 - mmcv - INFO - 
backbone.layer1.1.conv3.weight - torch.Size([256, 64, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 
 
2023-03-29 01:49:23,638 - mmcv - INFO - 
backbone.layer1.1.bn3.weight - torch.Size([256]): 
Initialized by user-defined `init_weights` in ResNet  
 
2023-03-29 01:49:23,638 - mmcv - INFO - 
backbone.layer1.1.bn3.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of ImageClassifier  
 
2023-03-29 01:49:23,638 - mmcv - INFO - 
backbone.layer1.2.conv1.weight - torch.Size([64, 256, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 
 
2023-03-29 01:49:23,638 - mmcv - INFO - 
backbone.layer1.2.bn1.weight - torch.Size([64]): 
The value is the same before and after calling `init_weights` of ImageClassifier  
 
2023-03-29 01:49:23,638 - mmcv - INFO - 
backbone.layer1.2.bn1.bias - torch.Size([64]): 
The value is the same before and after calling `init_weights` of ImageClassifier  
 
2023-03-29 01:49:23,638 - mmcv - INFO - 
backbone.layer1.2.conv2.weight - torch.Size([64, 64, 3, 3]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 
 
2023-03-29 01:49:23,638 - mmcv - INFO - 
backbone.layer1.2.bn2.weight - torch.Size([64]): 
The value is the same before and after calling `init_weights` of ImageClassifier  
 
2023-03-29 01:49:23,638 - mmcv - INFO - 
backbone.layer1.2.bn2.bias - torch.Size([64]): 
The value is the same before and after calling `init_weights` of ImageClassifier  
 
2023-03-29 01:49:23,638 - mmcv - INFO - 
backbone.layer1.2.conv3.weight - torch.Size([256, 64, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 
 
2023-03-29 01:49:23,639 - mmcv - INFO - 
backbone.layer1.2.bn3.weight - torch.Size([256]): 
Initialized by user-defined `init_weights` in ResNet  
 
2023-03-29 01:49:23,639 - mmcv - INFO - 
backbone.layer1.2.bn3.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of ImageClassifier  
 
2023-03-29 01:49:23,639 - mmcv - INFO - 
backbone.layer2.0.conv1.weight - torch.Size([128, 256, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 
 
2023-03-29 01:49:23,639 - mmcv - INFO - 
backbone.layer2.0.bn1.weight - torch.Size([128]): 
The value is the same before and after calling `init_weights` of ImageClassifier  
 
2023-03-29 01:49:23,639 - mmcv - INFO - 
backbone.layer2.0.bn1.bias - torch.Size([128]): 
The value is the same before and after calling `init_weights` of ImageClassifier  
 
2023-03-29 01:49:23,639 - mmcv - INFO - 
backbone.layer2.0.conv2.weight - torch.Size([128, 128, 3, 3]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 
 
2023-03-29 01:49:23,639 - mmcv - INFO - 
backbone.layer2.0.bn2.weight - torch.Size([128]): 
The value is the same before and after calling `init_weights` of ImageClassifier  
 
2023-03-29 01:49:23,639 - mmcv - INFO - 
backbone.layer2.0.bn2.bias - torch.Size([128]): 
The value is the same before and after calling `init_weights` of ImageClassifier  
 
2023-03-29 01:49:23,639 - mmcv - INFO - 
backbone.layer2.0.conv3.weight - torch.Size([512, 128, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 
 
2023-03-29 01:49:23,640 - mmcv - INFO - 
backbone.layer2.0.bn3.weight - torch.Size([512]): 
Initialized by user-defined `init_weights` in ResNet  
 
2023-03-29 01:49:23,640 - mmcv - INFO - 
backbone.layer2.0.bn3.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of ImageClassifier  
 
2023-03-29 01:49:23,640 - mmcv - INFO - 
backbone.layer2.0.downsample.0.weight - torch.Size([512, 256, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 
 
2023-03-29 01:49:23,640 - mmcv - INFO - 
backbone.layer2.0.downsample.1.weight - torch.Size([512]): 
The value is the same before and after calling `init_weights` of ImageClassifier  
 
2023-03-29 01:49:23,640 - mmcv - INFO - 
backbone.layer2.0.downsample.1.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of ImageClassifier  
 
2023-03-29 01:49:23,640 - mmcv - INFO - 
backbone.layer2.1.conv1.weight - torch.Size([128, 512, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 
 
2023-03-29 01:49:23,640 - mmcv - INFO - 
backbone.layer2.1.bn1.weight - torch.Size([128]): 
The value is the same before and after calling `init_weights` of ImageClassifier  
 
2023-03-29 01:49:23,640 - mmcv - INFO - 
backbone.layer2.1.bn1.bias - torch.Size([128]): 
The value is the same before and after calling `init_weights` of ImageClassifier  
 
2023-03-29 01:49:23,640 - mmcv - INFO - 
backbone.layer2.1.conv2.weight - torch.Size([128, 128, 3, 3]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 
 
2023-03-29 01:49:23,640 - mmcv - INFO - 
backbone.layer2.1.bn2.weight - torch.Size([128]): 
The value is the same before and after calling `init_weights` of ImageClassifier  
 
2023-03-29 01:49:23,640 - mmcv - INFO - 
backbone.layer2.1.bn2.bias - torch.Size([128]): 
The value is the same before and after calling `init_weights` of ImageClassifier  
 
2023-03-29 01:49:23,640 - mmcv - INFO - 
backbone.layer2.1.conv3.weight - torch.Size([512, 128, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 
 
2023-03-29 01:49:23,641 - mmcv - INFO - 
backbone.layer2.1.bn3.weight - torch.Size([512]): 
Initialized by user-defined `init_weights` in ResNet  
 
2023-03-29 01:49:23,641 - mmcv - INFO - 
backbone.layer2.1.bn3.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of ImageClassifier  
 
2023-03-29 01:49:23,641 - mmcv - INFO - 
backbone.layer2.2.conv1.weight - torch.Size([128, 512, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 
 
2023-03-29 01:49:23,641 - mmcv - INFO - 
backbone.layer2.2.bn1.weight - torch.Size([128]): 
The value is the same before and after calling `init_weights` of ImageClassifier  
 
2023-03-29 01:49:23,641 - mmcv - INFO - 
backbone.layer2.2.bn1.bias - torch.Size([128]): 
The value is the same before and after calling `init_weights` of ImageClassifier  
 
2023-03-29 01:49:23,641 - mmcv - INFO - 
backbone.layer2.2.conv2.weight - torch.Size([128, 128, 3, 3]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 
 
2023-03-29 01:49:23,641 - mmcv - INFO - 
backbone.layer2.2.bn2.weight - torch.Size([128]): 
The value is the same before and after calling `init_weights` of ImageClassifier  
 
2023-03-29 01:49:23,641 - mmcv - INFO - 
backbone.layer2.2.bn2.bias - torch.Size([128]): 
The value is the same before and after calling `init_weights` of ImageClassifier  
 
2023-03-29 01:49:23,641 - mmcv - INFO - 
backbone.layer2.2.conv3.weight - torch.Size([512, 128, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 
 
2023-03-29 01:49:23,641 - mmcv - INFO - 
backbone.layer2.2.bn3.weight - torch.Size([512]): 
Initialized by user-defined `init_weights` in ResNet  
 
2023-03-29 01:49:23,641 - mmcv - INFO - 
backbone.layer2.2.bn3.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of ImageClassifier  
 
2023-03-29 01:49:23,642 - mmcv - INFO - 
backbone.layer2.3.conv1.weight - torch.Size([128, 512, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 
 
2023-03-29 01:49:23,642 - mmcv - INFO - 
backbone.layer2.3.bn1.weight - torch.Size([128]): 
The value is the same before and after calling `init_weights` of ImageClassifier  
 
2023-03-29 01:49:23,642 - mmcv - INFO - 
backbone.layer2.3.bn1.bias - torch.Size([128]): 
The value is the same before and after calling `init_weights` of ImageClassifier  
 
2023-03-29 01:49:23,642 - mmcv - INFO - 
backbone.layer2.3.conv2.weight - torch.Size([128, 128, 3, 3]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 
 
2023-03-29 01:49:23,642 - mmcv - INFO - 
backbone.layer2.3.bn2.weight - torch.Size([128]): 
The value is the same before and after calling `init_weights` of ImageClassifier  
 
2023-03-29 01:49:23,642 - mmcv - INFO - 
backbone.layer2.3.bn2.bias - torch.Size([128]): 
The value is the same before and after calling `init_weights` of ImageClassifier  
 
2023-03-29 01:49:23,642 - mmcv - INFO - 
backbone.layer2.3.conv3.weight - torch.Size([512, 128, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 
 
2023-03-29 01:49:23,642 - mmcv - INFO - 
backbone.layer2.3.bn3.weight - torch.Size([512]): 
Initialized by user-defined `init_weights` in ResNet  
 
2023-03-29 01:49:23,642 - mmcv - INFO - 
backbone.layer2.3.bn3.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of ImageClassifier  
 
2023-03-29 01:49:23,642 - mmcv - INFO - 
backbone.layer3.0.conv1.weight - torch.Size([256, 512, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 
 
2023-03-29 01:49:23,642 - mmcv - INFO - 
backbone.layer3.0.bn1.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of ImageClassifier  
 
2023-03-29 01:49:23,642 - mmcv - INFO - 
backbone.layer3.0.bn1.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of ImageClassifier  
 
2023-03-29 01:49:23,643 - mmcv - INFO - 
backbone.layer3.0.conv2.weight - torch.Size([256, 256, 3, 3]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 
 
2023-03-29 01:49:23,643 - mmcv - INFO - 
backbone.layer3.0.bn2.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of ImageClassifier  
 
2023-03-29 01:49:23,643 - mmcv - INFO - 
backbone.layer3.0.bn2.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of ImageClassifier  
 
2023-03-29 01:49:23,643 - mmcv - INFO - 
backbone.layer3.0.conv3.weight - torch.Size([1024, 256, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 
 
2023-03-29 01:49:23,643 - mmcv - INFO - 
backbone.layer3.0.bn3.weight - torch.Size([1024]): 
Initialized by user-defined `init_weights` in ResNet  
 
2023-03-29 01:49:23,643 - mmcv - INFO - 
backbone.layer3.0.bn3.bias - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of ImageClassifier  
 
2023-03-29 01:49:23,643 - mmcv - INFO - 
backbone.layer3.0.downsample.0.weight - torch.Size([1024, 512, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 
 
2023-03-29 01:49:23,643 - mmcv - INFO - 
backbone.layer3.0.downsample.1.weight - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of ImageClassifier  
 
2023-03-29 01:49:23,643 - mmcv - INFO - 
backbone.layer3.0.downsample.1.bias - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of ImageClassifier  
 
2023-03-29 01:49:23,644 - mmcv - INFO - 
backbone.layer3.1.conv1.weight - torch.Size([256, 1024, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 
 
2023-03-29 01:49:23,644 - mmcv - INFO - 
backbone.layer3.1.bn1.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of ImageClassifier  
 
2023-03-29 01:49:23,644 - mmcv - INFO - 
backbone.layer3.1.bn1.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of ImageClassifier  
 
2023-03-29 01:49:23,644 - mmcv - INFO - 
backbone.layer3.1.conv2.weight - torch.Size([256, 256, 3, 3]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 
 
2023-03-29 01:49:23,644 - mmcv - INFO - 
backbone.layer3.1.bn2.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of ImageClassifier  
 
2023-03-29 01:49:23,644 - mmcv - INFO - 
backbone.layer3.1.bn2.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of ImageClassifier  
 
2023-03-29 01:49:23,644 - mmcv - INFO - 
backbone.layer3.1.conv3.weight - torch.Size([1024, 256, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 
 
2023-03-29 01:49:23,644 - mmcv - INFO - 
backbone.layer3.1.bn3.weight - torch.Size([1024]): 
Initialized by user-defined `init_weights` in ResNet  
 
2023-03-29 01:49:23,644 - mmcv - INFO - 
backbone.layer3.1.bn3.bias - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of ImageClassifier  
 
2023-03-29 01:49:23,644 - mmcv - INFO - 
backbone.layer3.2.conv1.weight - torch.Size([256, 1024, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 
 
2023-03-29 01:49:23,644 - mmcv - INFO - 
backbone.layer3.2.bn1.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of ImageClassifier  
 
2023-03-29 01:49:23,645 - mmcv - INFO - 
backbone.layer3.2.bn1.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of ImageClassifier  
 
2023-03-29 01:49:23,645 - mmcv - INFO - 
backbone.layer3.2.conv2.weight - torch.Size([256, 256, 3, 3]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 
 
2023-03-29 01:49:23,645 - mmcv - INFO - 
backbone.layer3.2.bn2.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of ImageClassifier  
 
2023-03-29 01:49:23,645 - mmcv - INFO - 
backbone.layer3.2.bn2.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of ImageClassifier  
 
2023-03-29 01:49:23,645 - mmcv - INFO - 
backbone.layer3.2.conv3.weight - torch.Size([1024, 256, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 
 
2023-03-29 01:49:23,645 - mmcv - INFO - 
backbone.layer3.2.bn3.weight - torch.Size([1024]): 
Initialized by user-defined `init_weights` in ResNet  
 
2023-03-29 01:49:23,645 - mmcv - INFO - 
backbone.layer3.2.bn3.bias - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of ImageClassifier  
 
2023-03-29 01:49:23,645 - mmcv - INFO - 
backbone.layer3.3.conv1.weight - torch.Size([256, 1024, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 
 
2023-03-29 01:49:23,645 - mmcv - INFO - 
backbone.layer3.3.bn1.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of ImageClassifier  
 
2023-03-29 01:49:23,645 - mmcv - INFO - 
backbone.layer3.3.bn1.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of ImageClassifier  
 
2023-03-29 01:49:23,646 - mmcv - INFO - 
backbone.layer3.3.conv2.weight - torch.Size([256, 256, 3, 3]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 
 
2023-03-29 01:49:23,646 - mmcv - INFO - 
backbone.layer3.3.bn2.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of ImageClassifier  
 
2023-03-29 01:49:23,646 - mmcv - INFO - 
backbone.layer3.3.bn2.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of ImageClassifier  
 
2023-03-29 01:49:23,646 - mmcv - INFO - 
backbone.layer3.3.conv3.weight - torch.Size([1024, 256, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 
 
2023-03-29 01:49:23,646 - mmcv - INFO - 
backbone.layer3.3.bn3.weight - torch.Size([1024]): 
Initialized by user-defined `init_weights` in ResNet  
 
2023-03-29 01:49:23,646 - mmcv - INFO - 
backbone.layer3.3.bn3.bias - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of ImageClassifier  
 
2023-03-29 01:49:23,646 - mmcv - INFO - 
backbone.layer3.4.conv1.weight - torch.Size([256, 1024, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 
 
2023-03-29 01:49:23,646 - mmcv - INFO - 
backbone.layer3.4.bn1.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of ImageClassifier  
 
2023-03-29 01:49:23,646 - mmcv - INFO - 
backbone.layer3.4.bn1.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of ImageClassifier  
 
2023-03-29 01:49:23,646 - mmcv - INFO - 
backbone.layer3.4.conv2.weight - torch.Size([256, 256, 3, 3]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 
 
2023-03-29 01:49:23,646 - mmcv - INFO - 
backbone.layer3.4.bn2.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of ImageClassifier  
 
2023-03-29 01:49:23,646 - mmcv - INFO - 
backbone.layer3.4.bn2.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of ImageClassifier  
 
2023-03-29 01:49:23,647 - mmcv - INFO - 
backbone.layer3.4.conv3.weight - torch.Size([1024, 256, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 
 
2023-03-29 01:49:23,647 - mmcv - INFO - 
backbone.layer3.4.bn3.weight - torch.Size([1024]): 
Initialized by user-defined `init_weights` in ResNet  
 
2023-03-29 01:49:23,647 - mmcv - INFO - 
backbone.layer3.4.bn3.bias - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of ImageClassifier  
 
2023-03-29 01:49:23,647 - mmcv - INFO - 
backbone.layer3.5.conv1.weight - torch.Size([256, 1024, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 
 
2023-03-29 01:49:23,647 - mmcv - INFO - 
backbone.layer3.5.bn1.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of ImageClassifier  
 
2023-03-29 01:49:23,647 - mmcv - INFO - 
backbone.layer3.5.bn1.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of ImageClassifier  
 
2023-03-29 01:49:23,647 - mmcv - INFO - 
backbone.layer3.5.conv2.weight - torch.Size([256, 256, 3, 3]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 
 
2023-03-29 01:49:23,647 - mmcv - INFO - 
backbone.layer3.5.bn2.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of ImageClassifier  
 
2023-03-29 01:49:23,648 - mmcv - INFO - 
backbone.layer3.5.bn2.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of ImageClassifier  
 
2023-03-29 01:49:23,648 - mmcv - INFO - 
backbone.layer3.5.conv3.weight - torch.Size([1024, 256, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 
 
2023-03-29 01:49:23,648 - mmcv - INFO - 
backbone.layer3.5.bn3.weight - torch.Size([1024]): 
Initialized by user-defined `init_weights` in ResNet  
 
2023-03-29 01:49:23,648 - mmcv - INFO - 
backbone.layer3.5.bn3.bias - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of ImageClassifier  
 
2023-03-29 01:49:23,648 - mmcv - INFO - 
backbone.layer4.0.conv1.weight - torch.Size([512, 1024, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 
 
2023-03-29 01:49:23,648 - mmcv - INFO - 
backbone.layer4.0.bn1.weight - torch.Size([512]): 
The value is the same before and after calling `init_weights` of ImageClassifier  
 
2023-03-29 01:49:23,648 - mmcv - INFO - 
backbone.layer4.0.bn1.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of ImageClassifier  
 
2023-03-29 01:49:23,648 - mmcv - INFO - 
backbone.layer4.0.conv2.weight - torch.Size([512, 512, 3, 3]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 
 
2023-03-29 01:49:23,648 - mmcv - INFO - 
backbone.layer4.0.bn2.weight - torch.Size([512]): 
The value is the same before and after calling `init_weights` of ImageClassifier  
 
2023-03-29 01:49:23,648 - mmcv - INFO - 
backbone.layer4.0.bn2.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of ImageClassifier  
 
2023-03-29 01:49:23,648 - mmcv - INFO - 
backbone.layer4.0.conv3.weight - torch.Size([2048, 512, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 
 
2023-03-29 01:49:23,648 - mmcv - INFO - 
backbone.layer4.0.bn3.weight - torch.Size([2048]): 
Initialized by user-defined `init_weights` in ResNet  
 
2023-03-29 01:49:23,648 - mmcv - INFO - 
backbone.layer4.0.bn3.bias - torch.Size([2048]): 
The value is the same before and after calling `init_weights` of ImageClassifier  
 
2023-03-29 01:49:23,649 - mmcv - INFO - 
backbone.layer4.0.downsample.0.weight - torch.Size([2048, 1024, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 
 
2023-03-29 01:49:23,649 - mmcv - INFO - 
backbone.layer4.0.downsample.1.weight - torch.Size([2048]): 
The value is the same before and after calling `init_weights` of ImageClassifier  
 
2023-03-29 01:49:23,649 - mmcv - INFO - 
backbone.layer4.0.downsample.1.bias - torch.Size([2048]): 
The value is the same before and after calling `init_weights` of ImageClassifier  
 
2023-03-29 01:49:23,649 - mmcv - INFO - 
backbone.layer4.1.conv1.weight - torch.Size([512, 2048, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 
 
2023-03-29 01:49:23,649 - mmcv - INFO - 
backbone.layer4.1.bn1.weight - torch.Size([512]): 
The value is the same before and after calling `init_weights` of ImageClassifier  
 
2023-03-29 01:49:23,649 - mmcv - INFO - 
backbone.layer4.1.bn1.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of ImageClassifier  
 
2023-03-29 01:49:23,649 - mmcv - INFO - 
backbone.layer4.1.conv2.weight - torch.Size([512, 512, 3, 3]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 
 
2023-03-29 01:49:23,649 - mmcv - INFO - 
backbone.layer4.1.bn2.weight - torch.Size([512]): 
The value is the same before and after calling `init_weights` of ImageClassifier  
 
2023-03-29 01:49:23,649 - mmcv - INFO - 
backbone.layer4.1.bn2.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of ImageClassifier  
 
2023-03-29 01:49:23,649 - mmcv - INFO - 
backbone.layer4.1.conv3.weight - torch.Size([2048, 512, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 
 
2023-03-29 01:49:23,649 - mmcv - INFO - 
backbone.layer4.1.bn3.weight - torch.Size([2048]): 
Initialized by user-defined `init_weights` in ResNet  
 
2023-03-29 01:49:23,649 - mmcv - INFO - 
backbone.layer4.1.bn3.bias - torch.Size([2048]): 
The value is the same before and after calling `init_weights` of ImageClassifier  
 
2023-03-29 01:49:23,649 - mmcv - INFO - 
backbone.layer4.2.conv1.weight - torch.Size([512, 2048, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 
 
2023-03-29 01:49:23,650 - mmcv - INFO - 
backbone.layer4.2.bn1.weight - torch.Size([512]): 
The value is the same before and after calling `init_weights` of ImageClassifier  
 
2023-03-29 01:49:23,650 - mmcv - INFO - 
backbone.layer4.2.bn1.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of ImageClassifier  
 
2023-03-29 01:49:23,650 - mmcv - INFO - 
backbone.layer4.2.conv2.weight - torch.Size([512, 512, 3, 3]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 
 
2023-03-29 01:49:23,650 - mmcv - INFO - 
backbone.layer4.2.bn2.weight - torch.Size([512]): 
The value is the same before and after calling `init_weights` of ImageClassifier  
 
2023-03-29 01:49:23,650 - mmcv - INFO - 
backbone.layer4.2.bn2.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of ImageClassifier  
 
2023-03-29 01:49:23,650 - mmcv - INFO - 
backbone.layer4.2.conv3.weight - torch.Size([2048, 512, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 
 
2023-03-29 01:49:23,650 - mmcv - INFO - 
backbone.layer4.2.bn3.weight - torch.Size([2048]): 
Initialized by user-defined `init_weights` in ResNet  
 
2023-03-29 01:49:23,650 - mmcv - INFO - 
backbone.layer4.2.bn3.bias - torch.Size([2048]): 
The value is the same before and after calling `init_weights` of ImageClassifier  
 
2023-03-29 01:49:23,650 - mmcv - INFO - 
head.fc.weight - torch.Size([14, 512]): 
NormalInit: mean=0, std=0.01, bias=0 
 
2023-03-29 01:49:23,650 - mmcv - INFO - 
head.fc.bias - torch.Size([14]): 
NormalInit: mean=0, std=0.01, bias=0 
 
Traceback (most recent call last):
  File "/home/dqwang/anaconda3/envs/distillation_ct/lib/python3.9/site-packages/mmcv/utils/registry.py", line 70, in build_from_cfg
    return obj_cls(**args)
  File "/home/dqwang/scratch/tongchen/mmclassification/mmcls/core/hook/wandblogger_hook.py", line 89, in __init__
Traceback (most recent call last):
  File "/home/dqwang/anaconda3/envs/distillation_ct/lib/python3.9/site-packages/mmcv/utils/registry.py", line 70, in build_from_cfg
    super(MMClsWandbHook, self).__init__(init_kwargs, interval, **kwargs)
  File "/home/dqwang/anaconda3/envs/distillation_ct/lib/python3.9/site-packages/mmcv/runner/hooks/logger/wandb.py", line 75, in __init__
    return obj_cls(**args)
  File "/home/dqwang/scratch/tongchen/mmclassification/mmcls/core/hook/wandblogger_hook.py", line 89, in __init__
    self.import_wandb()
  File "/home/dqwang/anaconda3/envs/distillation_ct/lib/python3.9/site-packages/mmcv/runner/hooks/logger/wandb.py", line 85, in import_wandb
    super(MMClsWandbHook, self).__init__(init_kwargs, interval, **kwargs)
  File "/home/dqwang/anaconda3/envs/distillation_ct/lib/python3.9/site-packages/mmcv/runner/hooks/logger/wandb.py", line 75, in __init__
    import wandb
  File "/home/dqwang/anaconda3/envs/distillation_ct/lib/python3.9/site-packages/wandb/__init__.py", line 26, in <module>
    self.import_wandb()
  File "/home/dqwang/anaconda3/envs/distillation_ct/lib/python3.9/site-packages/mmcv/runner/hooks/logger/wandb.py", line 85, in import_wandb
    from wandb import sdk as wandb_sdk
  File "/home/dqwang/anaconda3/envs/distillation_ct/lib/python3.9/site-packages/wandb/sdk/__init__.py", line 5, in <module>
    import wandb
  File "/home/dqwang/anaconda3/envs/distillation_ct/lib/python3.9/site-packages/wandb/__init__.py", line 26, in <module>
    from .wandb_artifacts import Artifact  # noqa: F401
  File "/home/dqwang/anaconda3/envs/distillation_ct/lib/python3.9/site-packages/wandb/sdk/wandb_artifacts.py", line 33, in <module>
    from wandb.apis import InternalApi, PublicApi
  File "/home/dqwang/anaconda3/envs/distillation_ct/lib/python3.9/site-packages/wandb/apis/__init__.py", line 42, in <module>
    from wandb import sdk as wandb_sdk
  File "/home/dqwang/anaconda3/envs/distillation_ct/lib/python3.9/site-packages/wandb/sdk/__init__.py", line 5, in <module>
    from .internal import Api as InternalApi  # noqa
  File "/home/dqwang/anaconda3/envs/distillation_ct/lib/python3.9/site-packages/wandb/apis/internal.py", line 1, in <module>
    from .wandb_artifacts import Artifact  # noqa: F401
  File "/home/dqwang/anaconda3/envs/distillation_ct/lib/python3.9/site-packages/wandb/sdk/wandb_artifacts.py", line 33, in <module>
    from wandb.sdk.internal.internal_api import Api as InternalApi
  File "/home/dqwang/anaconda3/envs/distillation_ct/lib/python3.9/site-packages/wandb/sdk/internal/internal_api.py", line 38, in <module>
    from wandb.apis import InternalApi, PublicApi
  File "/home/dqwang/anaconda3/envs/distillation_ct/lib/python3.9/site-packages/wandb/apis/__init__.py", line 42, in <module>
    from wandb.apis.normalize import normalize_exceptions
  File "/home/dqwang/anaconda3/envs/distillation_ct/lib/python3.9/site-packages/wandb/apis/normalize.py", line 13, in <module>
    from .internal import Api as InternalApi  # noqa
  File "/home/dqwang/anaconda3/envs/distillation_ct/lib/python3.9/site-packages/wandb/apis/internal.py", line 1, in <module>
    from wandb.sdk.lib.mailbox import ContextCancelledError
  File "/home/dqwang/anaconda3/envs/distillation_ct/lib/python3.9/site-packages/wandb/sdk/lib/mailbox.py", line 10, in <module>
    from wandb.sdk.internal.internal_api import Api as InternalApi
  File "/home/dqwang/anaconda3/envs/distillation_ct/lib/python3.9/site-packages/wandb/sdk/internal/internal_api.py", line 38, in <module>
    from wandb.proto import wandb_internal_pb2 as pb
  File "/home/dqwang/anaconda3/envs/distillation_ct/lib/python3.9/site-packages/wandb/proto/wandb_internal_pb2.py", line 8, in <module>
    from wandb.apis.normalize import normalize_exceptions
  File "/home/dqwang/anaconda3/envs/distillation_ct/lib/python3.9/site-packages/wandb/apis/normalize.py", line 13, in <module>
    from wandb.proto.v4.wandb_internal_pb2 import *
  File "/home/dqwang/anaconda3/envs/distillation_ct/lib/python3.9/site-packages/wandb/proto/v4/wandb_internal_pb2.py", line 5, in <module>
    from wandb.sdk.lib.mailbox import ContextCancelledError
  File "/home/dqwang/anaconda3/envs/distillation_ct/lib/python3.9/site-packages/wandb/sdk/lib/mailbox.py", line 10, in <module>
    from google.protobuf.internal import builder as _builder
  File "/home/dqwang/anaconda3/envs/distillation_ct/lib/python3.9/site-packages/google/protobuf/internal/builder.py", line 42, in <module>
    from wandb.proto import wandb_internal_pb2 as pb
  File "/home/dqwang/anaconda3/envs/distillation_ct/lib/python3.9/site-packages/wandb/proto/wandb_internal_pb2.py", line 8, in <module>
    from google.protobuf import reflection as _reflection
  File "/home/dqwang/anaconda3/envs/distillation_ct/lib/python3.9/site-packages/google/protobuf/reflection.py", line 51, in <module>
    from wandb.proto.v4.wandb_internal_pb2 import *
  File "/home/dqwang/anaconda3/envs/distillation_ct/lib/python3.9/site-packages/wandb/proto/v4/wandb_internal_pb2.py", line 5, in <module>
    from google.protobuf import message_factory
  File "/home/dqwang/anaconda3/envs/distillation_ct/lib/python3.9/site-packages/google/protobuf/message_factory.py", line 44, in <module>
    from google.protobuf.internal import builder as _builder
  File "/home/dqwang/anaconda3/envs/distillation_ct/lib/python3.9/site-packages/google/protobuf/internal/builder.py", line 42, in <module>
    from google.protobuf.internal import api_implementation
  File "/home/dqwang/anaconda3/envs/distillation_ct/lib/python3.9/site-packages/google/protobuf/internal/api_implementation.py", line 104, in <module>
    from google.protobuf import reflection as _reflection
  File "/home/dqwang/anaconda3/envs/distillation_ct/lib/python3.9/site-packages/google/protobuf/reflection.py", line 51, in <module>
    from google.protobuf.pyext import _message
TypeError: bases must be types

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "/home/dqwang/scratch/tongchen/mmclassification/./tools/train.py", line 215, in <module>
    from google.protobuf import message_factory
  File "/home/dqwang/anaconda3/envs/distillation_ct/lib/python3.9/site-packages/google/protobuf/message_factory.py", line 44, in <module>
    main()
  File "/home/dqwang/scratch/tongchen/mmclassification/./tools/train.py", line 203, in main
    from google.protobuf.internal import api_implementation
  File "/home/dqwang/anaconda3/envs/distillation_ct/lib/python3.9/site-packages/google/protobuf/internal/api_implementation.py", line 104, in <module>
    train_model(
  File "/home/dqwang/scratch/tongchen/mmclassification/mmcls/apis/train.py", line 199, in train_model
    from google.protobuf.pyext import _message
TypeError: bases must be types

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "/home/dqwang/scratch/tongchen/mmclassification/./tools/train.py", line 215, in <module>
    runner.register_training_hooks(
  File "/home/dqwang/anaconda3/envs/distillation_ct/lib/python3.9/site-packages/mmcv/runner/base_runner.py", line 565, in register_training_hooks
    main()
  File "/home/dqwang/scratch/tongchen/mmclassification/./tools/train.py", line 203, in main
    self.register_logger_hooks(log_config)
  File "/home/dqwang/anaconda3/envs/distillation_ct/lib/python3.9/site-packages/mmcv/runner/base_runner.py", line 482, in register_logger_hooks
    train_model(
  File "/home/dqwang/scratch/tongchen/mmclassification/mmcls/apis/train.py", line 199, in train_model
    logger_hook = mmcv.build_from_cfg(
  File "/home/dqwang/anaconda3/envs/distillation_ct/lib/python3.9/site-packages/mmcv/utils/registry.py", line 73, in build_from_cfg
    runner.register_training_hooks(
  File "/home/dqwang/anaconda3/envs/distillation_ct/lib/python3.9/site-packages/mmcv/runner/base_runner.py", line 565, in register_training_hooks
    raise type(e)(f'{obj_cls.__name__}: {e}')
TypeError: MMClsWandbHook: bases must be types
    self.register_logger_hooks(log_config)
  File "/home/dqwang/anaconda3/envs/distillation_ct/lib/python3.9/site-packages/mmcv/runner/base_runner.py", line 482, in register_logger_hooks
    logger_hook = mmcv.build_from_cfg(
  File "/home/dqwang/anaconda3/envs/distillation_ct/lib/python3.9/site-packages/mmcv/utils/registry.py", line 73, in build_from_cfg
    raise type(e)(f'{obj_cls.__name__}: {e}')
TypeError: MMClsWandbHook: bases must be types
ERROR:torch.distributed.elastic.multiprocessing.api:failed (exitcode: 1) local_rank: 0 (pid: 1103590) of binary: /home/dqwang/anaconda3/envs/distillation_ct/bin/python
Traceback (most recent call last):
  File "/home/dqwang/anaconda3/envs/distillation_ct/lib/python3.9/runpy.py", line 197, in _run_module_as_main
    return _run_code(code, main_globals, None,
  File "/home/dqwang/anaconda3/envs/distillation_ct/lib/python3.9/runpy.py", line 87, in _run_code
    exec(code, run_globals)
  File "/home/dqwang/anaconda3/envs/distillation_ct/lib/python3.9/site-packages/torch/distributed/launch.py", line 193, in <module>
    main()
  File "/home/dqwang/anaconda3/envs/distillation_ct/lib/python3.9/site-packages/torch/distributed/launch.py", line 189, in main
    launch(args)
  File "/home/dqwang/anaconda3/envs/distillation_ct/lib/python3.9/site-packages/torch/distributed/launch.py", line 174, in launch
    run(args)
  File "/home/dqwang/anaconda3/envs/distillation_ct/lib/python3.9/site-packages/torch/distributed/run.py", line 715, in run
    elastic_launch(
  File "/home/dqwang/anaconda3/envs/distillation_ct/lib/python3.9/site-packages/torch/distributed/launcher/api.py", line 131, in __call__
    return launch_agent(self._config, self._entrypoint, list(args))
  File "/home/dqwang/anaconda3/envs/distillation_ct/lib/python3.9/site-packages/torch/distributed/launcher/api.py", line 245, in launch_agent
    raise ChildFailedError(
torch.distributed.elastic.multiprocessing.errors.ChildFailedError: 
============================================================
./tools/train.py FAILED
------------------------------------------------------------
Failures:
[1]:
  time      : 2023-03-29_01:49:33
  host      : leviathan.ist.berkeley.edu
  rank      : 1 (local_rank: 1)
  exitcode  : 1 (pid: 1103591)
  error_file: <N/A>
  traceback : To enable traceback see: https://pytorch.org/docs/stable/elastic/errors.html
------------------------------------------------------------
Root Cause (first observed failure):
[0]:
  time      : 2023-03-29_01:49:33
  host      : leviathan.ist.berkeley.edu
  rank      : 0 (local_rank: 0)
  exitcode  : 1 (pid: 1103590)
  error_file: <N/A>
  traceback : To enable traceback see: https://pytorch.org/docs/stable/elastic/errors.html
============================================================
